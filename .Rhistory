digits=5) #display 5 decimal places in output
#
prp(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
#
install.packages("rattle")
install.packages("rpart")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
fancyRpartPlot(tree)
fancyRpartPlot(tree)
fancyRpartPlot(fit, palettes=c("Greys", "Oranges"))
fancyRpartPlot(tree)
fancyRpartPlot(tree, palettes=c("Greys", "Oranges"))
# By creating a decision tree for Salesbin using in function for all predictors, we get the follow decision tree.
# What we can see from this tree is that
pruned_tree <- prune(tree, cp=best)
pruned_tree <- prune(tree, cp=tree)
cp <- tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
pruned_tree <- prune(tree, cp=cp)
prp(pruned_tree,
faclen=0, #use full names for factor labels
extra=1, #display number of obs. for each terminal node
roundint=F, #don't round to integers in output
digits=5) #display 5 decimal places in output
#define new player
new <- data.frame(Price=55, Income=40000)
#use pruned tree to predict salary of this player
predict(pruned_tree, newdata=new)
fancyRpartPlot(tree, palettes=c("Greys", "Oranges"))
# By creating a decision tree for Salesbin using in function for all predictors, we get the follow decision tree.
# What we can see from this tree is that price is less than 90 then we get two branches, yes or no
# CASE 1 --> Price < 90 --> Comp-price >= 100, if no then, 3%
tree = rpart(Salesbin ~ CompPrice + Income + Price, data=train, control=rpart.control(cp=.0001))
fancyRpartPlot(tree, palettes=c("Greys", "Oranges"))
# By creating a decision tree for Salesbin using in function for all predictors, we get the follow decision tree.
# What we can see from this tree is that price is less than 90 then we get two branches, yes or no
# CASE 1 --> Price < 90 --> Comp-price >= 100, if no then, 3%
tree = rpart(Salesbin ~ Income + Price, data=train, control=rpart.control(cp=.0001))
fancyRpartPlot(tree, palettes=c("Greys", "Oranges"))
# By creating a decision tree for Salesbin using in function for all predictors, we get the follow decision tree.
# What we can see from this tree is that price is less than 90 then we get two branches, yes or no
# CASE 1 --> Price < 90 --> Comp-price >= 100, if no then, 3%
tree = rpart(Salesbin ~  Price, data=train, control=rpart.control(cp=.0001))
tree = rpart(Salesbin ~ Price, data=train, control=rpart.control(cp=.0001))
fancyRpartPlot(tree, palettes=c("Greys", "Oranges"))
# By creating a decision tree for Salesbin using in function for all predictors, we get the follow decision tree.
# What we can see from this tree is that price is less than 90 then we get two branches, yes or no
# CASE 1 --> Price < 90 --> Comp-price >= 100, if no then, 3%
lm = lm(train, formula = area~.)
lm = lm(Salesbin ~ CompPrice + 	Income + Advertising + Population + Price + Age + Education, data = train)
data_new = train                                     # Duplicate data
data_new[is.na(data_new) | data_new == "Inf"] = NA
lm = lm(Salesbin ~ CompPrice + 	Income + Advertising + Population + Price + Age + Education, data = train)
lm = lm(Salesbin ~ CompPrice + 	Income + Advertising + Population + Price + Age + Education, data = data_new)
lm = lm(Salesbin ~ CompPrice + 	Income + Advertising + Population + Price + Age + Education, data = train)
sum(is.na(train))
lm = lm(Salesbin ~ CompPrice + 	Income + Advertising + Population + Price + Age + Education, data = train)
lm = lm(Salesbin ~ CompPrice + 	Income + Advertising + Population + Price + Age + Education, data = train,na.action=na.exclude)
lm = lm(Salesbin ~ CompPrice + 	Income + Advertising + Population + Price + Age + Education, data = train, na.action=na.exclude)
install.packages("leaps")
library(leaps)
mod = regsubsets(Price~.,
data =train,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
Best_Subset = regsubsets(Price~.,
data =train,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary_best_subset <- summary(regsubsets.out)
Best_Subset = regsubsets(Price~.,
data =train,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary_best_subset <- summary(regsubsets.out)
summary_best_subset <- summary(regsubsets)
as.data.frame(summary_best_subset$outmat)
summary_best_subset <- summary(regsubsets.out)
summary_best_subset <- summary(train)
as.data.frame(summary_best_subset$outmat)
summary_best_subset <- summary(train)
as.data.frame(summary_best_subset$rsq)
lm = lm(Price ~ CompPrice + 	Income + Advertising + Population  + Age + Education, data = train)
lm = lm(Price ~ CompPrice + 	Income + Advertising + Population  + Age + Education, data = train)
lm
lm = lm(Price ~ CompPrice + 	Income + Advertising + Population  + Age + Education, data = train)
options(scipen = 999)
lm
lm = lm(Price ~ CompPrice + 	Income + Advertising + Population  + Age + Education, data = train)
options(scipen = 999)
summary(lm)
library(leaps)
Best_Subset <-
regsubsets(Price~.,
data = train,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary_best_subset <- summary(regsubsets.out)
Best_Subset <-
regsubsets(Price~.,
data = train,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
#summary_best_subset <- summary(regsubsets.out)
as.data.frame(summary_best_subset$outmat)
Best_Subset <-
regsubsets(Price~.,
data = train,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
#summary_best_subset <- summary(regsubsets.out)
as.data.frame(summary_best_subset)
which.max(summary_best_subset$adjr2)
str(laptop_df)
tree = rpart(train$Price ~ train$CompPrice + train$Income + train$Advertising + train$Population + train$Age + train$Education, data=train, control=rpart.control(cp=.0001))
fancyRpartPlot(tree, palettes=c("Greys", "Oranges"))
# By creating a decision tree for Salesbin using in function for all predictors, we get the follow decision tree.
# What we can see from this tree is that price is less than 90 then we get two branches, yes or no
# CASE 1 --> Price < 90 --> Comp-price >= 100, if no then, 3%
tree = rpart(train$Price ~ train$CompPrice + train$Income + train$Advertising + train$Population + train$Age + train$Education, data=train, control=rpart.control(cp=.0001))
tree
tree = rpart(train$Price ~ train$CompPrice + train$Income + train$Advertising + train$Population + train$Age + train$Education, data=train, control=rpart.control(cp=.0001))
model<- ctree(Prince ~ ., train)
tree = rpart(train$Price ~ train$Salesbin + train$CompPrice + train$Income + train$Advertising + train$Population + train$Age + train$Education, data=train, control=rpart.control(cp=.0001))
fancyRpartPlot(tree, palettes=c("Greys", "Oranges"))
library(party)
install.packages("party")
library(party)
tree<-ctree(v~vhigh+vhigh.1+X2,data = train)
knitr::opts_chunk$set(echo = TRUE)
df = readr::read_csv("caravan-insurance-challenge.csv", show_col_types = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("Hmisc")
# install.packages("pastecs")
# install.packages("ggplot2")
# install.packages("Hmisc")
# install.packages("fastDummies")
# install.packages("lmtest")
# install.packages("lmtest")
# install.packages("caretEnsemble")
# install.packages("Amelia")
# install.packages("GGally")
library(ggplot2)
library(psych)
library(corrplot)
library(caret)
library(glmnet)
library(leaps)
library(reshape2)
library(gridExtra)
library(fastDummies)
library(lmtest)
library(pastecs)
library(skimr)
library(tidyverse)
library(caret)
library(caretEnsemble)
library(psych)
library(Amelia)
library(mice)
library(GGally)
library(rpart)
library(randomForest)
library(nnet)
library(ROCR)
library(Metrics)
library(caret)
library(pscl)
library(forecast)
library(rpart)
library(rattle)
library(ggplot2)
library(plyr)
library(rlist)
library(pROC)
library(ROSE)
library(plotly)
df = readr::read_csv("caravan-insurance-challenge.csv", show_col_types = FALSE)
dimension = dim(df)
# total number of observations are 9822
# total number of variables are 86 ignoring the 1st column which is meaningless for our data
totalRows = dimension[1]
# data type of 86 variables is number and 1 variable is char, our target variable is number of policies bought remaining variables are categorical numeric.
head(df)
# explore top 5 rows
# summary of main data set
# stat.desc(df)
# summary(df)
# missing values in main data set
paste0("Total missing values:", sum(is.na(df)))
desc = skim(df)
knitr::opts_chunk$set(echo = TRUE)
# Converting 30k income into value
df$MINKM30_c = ifelse(df$MINKM30 == 1, 0.05 * 30000, df$MINKM30)
df$MINKM30_c = ifelse(df$MINKM30_c == 2, 0.17 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 3, 0.3 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 4, 0.43 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 5, 0.56 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 6, 0.69 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 7, 0.82 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 8, 0.94 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 9, 1 * 30000, df$MINKM30_c)
# Converting 45k income into value
df$MINK3045_c = ifelse(df$MINK3045 == 1, 0.05 * 45000, df$MINK3045)
df$MINK3045_c = ifelse(df$MINK3045_c == 2, 0.17 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 3, 0.3 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 4, 0.43 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 5, 0.56 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 6, 0.69 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 7, 0.82 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 8, 0.94 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 9, 1 * 45000, df$MINK3045_c)
# Converting 70k income into value
df$MINK4575_c = ifelse(df$MINK4575 == 1, 0.05 * 75000, df$MINK4575)
df$MINK4575_c = ifelse(df$MINK4575_c == 2, 0.17 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 3, 0.3 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 4, 0.43 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 5, 0.56 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 6, 0.69 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 7, 0.82 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 8, 0.94 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 9, 1 * 75000, df$MINK4575_c)
# Converting 122k income into value
df$MINK7512_c = ifelse(df$MINK7512 == 1, 0.05 * 122000, df$MINK7512)
df$MINK7512_c = ifelse(df$MINK7512_c == 2, 0.17 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 3, 0.3 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 4, 0.43 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 5, 0.56 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 6, 0.69 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 7, 0.82 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 8, 0.94 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 9, 1 * 122000, df$MINK7512_c)
# Converting 123k income into value
df$MINK123M_c = ifelse(df$MINK123M == 1, 0.05 * 123000, df$MINK123M)
df$MINK123M_c = ifelse(df$MINK123M_c == 2, 0.17 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 3, 0.3 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 4, 0.43 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 5, 0.56 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 6, 0.69 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 7, 0.82 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 8, 0.94 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 9, 1 * 123000, df$MINK123M_c)
# Average income
df$MINKGEM_c = (df$MINK123M_c + df$MINK7512_c + df$MINK4575_c + df$MINK3045_c + df$MINKM30_c)/5
hist(df$MINKGEM_c)
plot_ly(df$MINKGEM_c, x = df$MINKGEM_c, type = "histogram")
plot_ly(x = df$MINKGEM_c, type = "histogram")
plot_ly(x = df$MINKGEM_c, type = "histogram", histfunc='sum')
plot_ly(x = df$MINKGEM_c, type = "histogram")
plot_ly(x = df$MINKGEM_c, type = "histogram")%>% layout(yaxis=list(type='linear'))
plot_ly(x = df$MINKGEM_c, type = "histogram")
plot_ly(x = df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c)
plot_ly(x = df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("Pink", "blue", "red", "green", "yellow", "purple"))
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("Pink", "blue", "red", "green", "yellow", "purple")) %>%
layout(title = "<b>Income Levels<b>")
plot_ly(x = ~df$MINKGEM_c, y = ~Frequency, type = "histogram", color = df$MINKGEM_c, colors = c("Pink", "blue", "red", "green", "yellow", "purple")) %>%
layout(title = "<b>Income Levels<b>")
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("Pink", "blue", "red", "green", "yellow", "purple")) %>%
layout(title = "<b>Income Levels<b>")
# Converting 30k income into value
df$MINKM30_c = ifelse(df$MINKM30 == 1, 0.05 * 30000, df$MINKM30)
df$MINKM30_c = ifelse(df$MINKM30_c == 2, 0.17 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 3, 0.3 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 4, 0.43 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 5, 0.56 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 6, 0.69 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 7, 0.82 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 8, 0.94 * 30000, df$MINKM30_c)
df$MINKM30_c = ifelse(df$MINKM30_c == 9, 1 * 30000, df$MINKM30_c)
# Converting 45k income into value
df$MINK3045_c = ifelse(df$MINK3045 == 1, 0.05 * 45000, df$MINK3045)
df$MINK3045_c = ifelse(df$MINK3045_c == 2, 0.17 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 3, 0.3 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 4, 0.43 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 5, 0.56 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 6, 0.69 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 7, 0.82 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 8, 0.94 * 45000, df$MINK3045_c)
df$MINK3045_c = ifelse(df$MINK3045_c == 9, 1 * 45000, df$MINK3045_c)
# Converting 70k income into value
df$MINK4575_c = ifelse(df$MINK4575 == 1, 0.05 * 75000, df$MINK4575)
df$MINK4575_c = ifelse(df$MINK4575_c == 2, 0.17 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 3, 0.3 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 4, 0.43 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 5, 0.56 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 6, 0.69 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 7, 0.82 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 8, 0.94 * 75000, df$MINK4575_c)
df$MINK4575_c = ifelse(df$MINK4575_c == 9, 1 * 75000, df$MINK4575_c)
# Converting 122k income into value
df$MINK7512_c = ifelse(df$MINK7512 == 1, 0.05 * 122000, df$MINK7512)
df$MINK7512_c = ifelse(df$MINK7512_c == 2, 0.17 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 3, 0.3 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 4, 0.43 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 5, 0.56 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 6, 0.69 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 7, 0.82 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 8, 0.94 * 122000, df$MINK7512_c)
df$MINK7512_c = ifelse(df$MINK7512_c == 9, 1 * 122000, df$MINK7512_c)
# Converting 123k income into value
df$MINK123M_c = ifelse(df$MINK123M == 1, 0.05 * 123000, df$MINK123M)
df$MINK123M_c = ifelse(df$MINK123M_c == 2, 0.17 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 3, 0.3 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 4, 0.43 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 5, 0.56 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 6, 0.69 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 7, 0.82 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 8, 0.94 * 123000, df$MINK123M_c)
df$MINK123M_c = ifelse(df$MINK123M_c == 9, 1 * 123000, df$MINK123M_c)
# Average income
df$MINKGEM_c = (df$MINK123M_c + df$MINK7512_c + df$MINK4575_c + df$MINK3045_c + df$MINKM30_c)/5
hist(df$MINKGEM_c)
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("Pink", "gold", "red", "green", "yellow", "purple")) %>%
layout(title = "<b>Income Levels<b>")
# Since our data is categorical and gives us levels, after having discussed with the professor, we agreed that a good approach would be convert the income as a categorical variable to numeric one.
# In order to do that, we had to decide a method by which we would do so. The method was decided, mapped out in our excel file
# Here we just brought the calculations done in excel
# The idea was to take the average of income for each category
# From the following histogram we can see that most of customers are skewed towards left but we can see in detail as well that most customers are between 5k - 20K
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("gold")) %>%
layout(title = "<b>Income Levels<b>")
# Since our data is categorical and gives us levels, after having discussed with the professor, we agreed that a good approach would be convert the income as a categorical variable to numeric one.
# In order to do that, we had to decide a method by which we would do so. The method was decided, mapped out in our excel file
# Here we just brought the calculations done in excel
# The idea was to take the average of income for each category
# From the following histogram we can see that most of customers are skewed towards left but we can see in detail as well that most customers are between 5k - 20K
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("gold", "red")) %>%
layout(title = "<b>Income Levels<b>")
# Since our data is categorical and gives us levels, after having discussed with the professor, we agreed that a good approach would be convert the income as a categorical variable to numeric one.
# In order to do that, we had to decide a method by which we would do so. The method was decided, mapped out in our excel file
# Here we just brought the calculations done in excel
# The idea was to take the average of income for each category
# From the following histogram we can see that most of customers are skewed towards left but we can see in detail as well that most customers are between 5k - 20K
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("gold", "red", "green", "pink", "pruple", "brown")) %>%
layout(title = "<b>Income Levels<b>")
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("gold", "red", "green", "pink", "brown")) %>%
layout(title = "<b>Income Levels<b>")
# Since our data is categorical and gives us levels, after having discussed with the professor, we agreed that a good approach would be convert the income as a categorical variable to numeric one.
# In order to do that, we had to decide a method by which we would do so. The method was decided, mapped out in our excel file
# Here we just brought the calculations done in excel
# The idea was to take the average of income for each category
# From the following histogram we can see that most of customers are skewed towards left but we can see in detail as well that most customers are between 5k - 20K
plot_ly(x = ~df$MINKGEM_c, type = "histogram", color = df$MINKGEM_c, colors = c("gold", "blue", "green", "pink", "brown")) %>%
layout(title = "<b>Income Levels<b>")
# Since our data is categorical and gives us levels, after having discussed with the professor, we agreed that a good approach would be convert the income as a categorical variable to numeric one.
# In order to do that, we had to decide a method by which we would do so. The method was decided, mapped out in our excel file
# Here we just brought the calculations done in excel
# The idea was to take the average of income for each category
# From the following histogram we can see that most of customers are skewed towards left but we can see in detail as well that most customers are between 5k - 20K
barplot(prop.table(table(df$CARAVAN)), col = rainbow(2), ylim = c(0,0.7), main = "Class Distribution")
prop.table(table(df$CARAVAN))
# 94% people didn't buy insurance and only 5% bought. under sampling problem
plot_ly(x = prop.table(table(df$CARAVAN), type ='bar' )
plot_ly(x = prop.table(table(df$CARAVAN), y = c(0,0.7), type ='bar' )
plot_ly(x = prop.table(table(df$CARAVAN), y = c(0,0.7), type ='bar' ))
barplot(prop.table(table(df$CARAVAN)), col = rainbow(2), ylim = c(0,1), main = "Class Distribution")
# Here we have shown how the distribution is happening through a bar chart
y1 = c(0,1)
plot_ly(x = prop.table(table(df$CARAVAN), y = y1, type ='bar' ))
y1 = c(0,1)
tab = prop.table(table(df$CARAVAN))
plot_ly(x = tab, y = y1, type ='bar' ))
y1 = c(0,1)
tab = prop.table(table(df$CARAVAN))
plot_ly(x = tab, y = y1, type ='bar' )
set.seed(1)
df_part = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.6,0.4))
train_data = df[df_part,]
test_data = df[!df_part,]
dim(train_data)
dim(test_data)
train_data
cols(df)
col(df)
colnames(df)
colnames(df)
# training data
df_train = (df[df$ORIGIN == "train",])
df_train = (df_train[,-1])
nrow(df_train)
#testing data
df_test = (df[df$ORIGIN == "test",])
df_test = (df_test[,-1])
nrow(df_test)
table(df_test$CARAVAN)
over_train = ovun.sample(CARAVAN ~ ., data =df_train, method = "over", N =10948)$data
table(over_train$CARAVAN)
over_test = ovun.sample(CARAVAN ~ ., data =df_test, method = "over", N =nrow(df_test))$data
table(over_test$CARAVAN)
# we are not fixing sampling problem in test data, i did this because i was having error with doing prediction
for(i in 1:ncol(over_train)){
over_train[,i] <- as.factor(over_train[,i])
}
knitr::opts_chunk$set(echo = TRUE)
for(i in 1:ncol(over_train)){
over_train[,i] <- as.factor(over_train[,i])
}
for(i in 1:ncol(over_test)){
over_test[,i] <- as.factor(over_test[,i])
}
over_test$MINKGEM_c = as.numeric(over_test$MINKGEM_c)
over_train$MINKGEM_c = as.numeric(over_train$MINKGEM_c)
over_test$MGEMLEEF_c = as.numeric(over_test$MGEMLEEF_c)
over_train$MGEMLEEF_c = as.numeric(over_train$MGEMLEEF_c)
drewSummary = function(model) {
summary(model)
}
drewMatrix = function(model, test_data) {
predicted = predict(model, test_data, type = "response")
predictedClass = ifelse(predicted>=0.5, 1, 0)
confusionMatrix(as.factor(predictedClass), as.factor(test_data$CARAVAN), positive = "1")
}
drewAnova = function(model1, model2){
anova(model1, model2, test = 'Chisq')
}
drewROC = function(model){
predicted = predict(model, over_test, type = "response")
predictedClass = ifelse(predicted>=0.5, 1, 0)
r = roc(over_test$CARAVAN, predictedClass)
plot.roc(r)
}
getRMSE = function(predictedClass){
accuracy(predictedClass, as.numeric(over_test$CARAVAN))[2]
}
new_data = over_train
new_data$MOSHOOFD = as.numeric(new_data$MOSHOOFD)
new_data$MGEMOMV = as.numeric(new_data$MGEMOMV)
new_data$MINKGEM = as.numeric(new_data$MINKGEM)
new_data$MGEMLEEF = as.numeric(new_data$MGEMLEEF)
new_data$CARAVAN = as.numeric(new_data$CARAVAN)
new_data$OneHouse = as.numeric(new_data$OneHouse)
corrplot(cor(subset(new_data , select = c("MOSHOOFD", "MGEMOMV", "OneHouse", "MINKGEM", "MGEMLEEF", "CARAVAN"))), method = "number", type = "upper")
drewSummary = function(model) {
summary(model)
}
drewSummary
drewMatrix = function(model, test_data) {
predicted = predict(model, test_data, type = "response")
predictedClass = ifelse(predicted>=0.5, 1, 0)
confusionMatrix(as.factor(predictedClass), as.factor(test_data$CARAVAN), positive = "1")
}
drewMatrix
getRMSE = function(predictedClass){
accuracy(predictedClass, as.numeric(over_test$CARAVAN))[2]
}
getRMSE = function(predictedClass){
accuracy(predictedClass, as.numeric(over_test$CARAVAN))[2]
}
drewROC = function(model){
predicted = predict(model, over_test, type = "response")
predictedClass = ifelse(predicted>=0.5, 1, 0)
r = roc(over_test$CARAVAN, predictedClass)
plot.roc(r)
}
drewAnova = function(model1, model2){
anova(model1, model2, test = 'Chisq')
}
drewMatrix = function(model, test_data) {
predicted = predict(model, test_data, type = "response")
predictedClass = ifelse(predicted>=0.5, 1, 0)
confusionMatrix(as.factor(predictedClass), as.factor(test_data$CARAVAN), positive = "1")
}
drewMatrix()
drewMatrix = function(model, test_data) {
predicted = predict(model, test_data, type = "response")
predictedClass = ifelse(predicted>=0.5, 1, 0)
confusionMatrix(as.factor(predictedClass), as.factor(test_data$CARAVAN), positive = "1")
}
drewMatrix
getRMSE = function(predictedClass){
accuracy(predictedClass, as.numeric(over_test$CARAVAN))[2]
}
new_data = over_train
new_data$MOSHOOFD = as.numeric(new_data$MOSHOOFD)
new_data$MGEMOMV = as.numeric(new_data$MGEMOMV)
new_data$MINKGEM = as.numeric(new_data$MINKGEM)
new_data$MGEMLEEF = as.numeric(new_data$MGEMLEEF)
new_data$CARAVAN = as.numeric(new_data$CARAVAN)
new_data$OneHouse = as.numeric(new_data$OneHouse)
corrplot(cor(subset(new_data , select = c("MOSHOOFD", "MGEMOMV", "OneHouse", "MINKGEM", "MGEMLEEF", "CARAVAN"))), method = "number", type = "upper")
library(corrplot)
new_data = over_train
new_data$MOSHOOFD = as.numeric(new_data$MOSHOOFD)
new_data$MGEMOMV = as.numeric(new_data$MGEMOMV)
new_data$MINKGEM = as.numeric(new_data$MINKGEM)
new_data$MGEMLEEF = as.numeric(new_data$MGEMLEEF)
new_data$CARAVAN = as.numeric(new_data$CARAVAN)
new_data$OneHouse = as.numeric(new_data$OneHouse)
corrplot(cor(subset(new_data , select = c("MOSHOOFD", "MGEMOMV", "OneHouse", "MINKGEM", "MGEMLEEF", "CARAVAN"))), method = "number", type = "upper")
set.seed(123)
logit.reg = glm(CARAVAN ~ MOSHOOFD + MGEMOMV + OneHouse + MINKGEM_c+MGEMLEEF_c, data = over_train, family = binomial (link = "logit"))
logit.reg$xlevels[["MGEMOMV"]] <- union(logit.reg$xlevels[["MGEMOMV"]], levels(over_test$MGEMOMV))
drewSummary(logit.reg)
drewMatrix(logit.reg, over_test)
